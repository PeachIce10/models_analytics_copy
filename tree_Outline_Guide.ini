BLOCK 1 — ANALYTICS TREE (folder & file layout with inline comments, no versioned artifact folders)

# mono-repo root
├── go.mod                                                     # Root Go module so signals can import analytics/common cleanly
├── .dockerignore                                              # Keep Docker build contexts lean (ignore .git, __pycache__, models/registry, etc.)
├── buf.work.yaml                                              # (Optional) Buf workspace root for proto lint/breaking checks
├── golangci-lint.yml                                          # Go lint config (enterprise hygiene)
├── ruff.toml                                                  # Python linter config (ruff) for fast CI
├── mypy.ini                                                   # Optional static typing for Python jobs
├── .pre-commit-config.yaml                                    # Unified fmt/lint/yamllint/secrets hooks
├── CODEOWNERS                                                 # Review ownership by path (signals/jobs/pycommon/etc.)
├── CONTRIBUTING.md                                            # Contrib standards (branches, code style, DCO, etc.)
├── Makefile                                                   # Common build/test/publish targets for Go+Py
├── .editorconfig                                              # Editor rules (indentation, encodings, newlines)
├── .gitattributes                                             # LF normalization, linguist hints
├── .gitignore                                                 # Repo ignores (venv, dist, .idea, node_modules, etc.)
├── LICENSE                                                    # License text for distribution/internal reuse
├── SECURITY.md                                                # Vuln disclosure & hardening notes
│
├── analytics                                                  # Analytics slice (configs + Python jobs + Go signals)
│   ├── common/                                                # Shared Go helpers (used by signals only)
│   │   ├── config/
│   │   │   └── load.go                                        # Typed loader for analytics/configs/*.yaml (env overrides, required keys)
│   │   ├── datastore/
│   │   │   ├── clickhouse.go                                  # CH client helpers (ctx timeouts, retries, freshness probes)
│   │   │   └── postgres.go                                    # PG client helpers (pooling, tx, composite-key upserts)
│   │   └── timewin/
│   │       └── window.go                                      # Rolling windows (30/90/180/365d, custom)
│   │
│   ├── pycommon/                                              # Shared Python lib for ALL jobs (installable package)
│   │   ├── pyproject.toml                                     # Package metadata (pins/runtime)
│   │   ├── __init__.py                                        # Package marker
│   │   ├── config_loader.py                                   # Strict YAML/env loader (mirrors common/config/load.go)
│   │   ├── datastore_pg.py                                    # Postgres IO helpers (bulk read, COPY, upsert)
│   │   ├── datastore_ch.py                                    # ClickHouse IO helpers (partitioned reads/inserts)
│   │   ├── timewin.py                                         # Windowing + half-life decay helpers
│   │   ├── registry.py                                        # Read/write versioned artifacts (FS/S3/GCS)
│   │   ├── features.py                                        # Shared feature transforms (DRY across jobs)
│   │   ├── validation.py                                      # Row-level checks (schema/types/keys/ranges/dedupe)
│   │   ├── logging.py                                         # Structured logs (trace/request/job IDs)
│   │   └── metrics.py                                         # Prometheus job metrics helpers
│   │
│   ├── native/                                                # (Optional) vendor/build native libs used in-process by signals (no sidecars)
│   │   ├── cpp/
│   │   │   ├── faiss/                                         # FAISS build scripts or vendored bins (if embedding)
│   │   │   │   ├── BUILD.md                                   # Repro builds + link flags for CGO
│   │   │   │   └── CMakeLists.txt                              # Optional CMake recipe
│   │   │   ├── onnxruntime/                                   # ONNX Runtime packaging notes (C/C++)
│   │   │   │   ├── BUILD.md
│   │   │   │   └── CMakeLists.txt
│   │   │   └── gbdt/                                          # LightGBM/XGBoost/CatBoost C API packaging notes
│   │   │       ├── BUILD.md
│   │   │       └── CMakeLists.txt
│   │   └── include/                                           # Central headers for cgo if you vendor them
│   │       └── .gitkeep
│   │
│   ├── configs/                                               # Declarative configuration (source of truth)
│   │   ├── signals.yaml                                       # Signals service config + request-time guards (freshness, caps, eligibility)
│   │   └── models/                                            # Per-model job configs (split by domain)
│   │       ├── customer/
│   │       │   ├── clv_fit_mle.yaml                           # BG/NBD+GG (MLE) training controls
│   │       │   ├── clv_fit_bayes.yaml                         # Pareto/NBD Bayes priors/controls
│   │       │   ├── clv_score.yaml                             # Batch scoring + tier output table
│   │       │   ├── personas_hdbscan.yaml                      # HDBSCAN params + featureset
│   │       │   ├── affinities_daily.yaml                      # Time-decay + Dirichlet α for affinities
│   │       │   ├── churn_train.yaml                           # Churn training (GBM/logit)
│   │       │   ├── churn_score.yaml                           # Churn risk scoring windows
│   │       │   ├── lifecycle_fit.yaml                         # HSMM/Hawkes fit params
│   │       │   └── lifecycle_score.yaml                       # Lifecycle state scoring
│   │       ├── pdp/
│   │       │   ├── cross_sell_train.yaml                      # Graph embeddings / Apriori / Node2Vec
│   │       │   └── cross_sell_daily.yaml                      # Complements refresh (serveable)
│   │       ├── cart/
│   │       │   ├── basket_rerank_train.yaml                   # Session/cart re-ranker (export=ONNX)
│   │       │   ├── upsell_train.yaml                          # GBM/logreg training (export=ONNX/native)
│   │       │   └── upsell_daily.yaml                          # Daily upsell eligibility refresh
│   │       ├── search/
│   │       │   ├── reco_towers_train.yaml                     # Two-tower retrieval training (export=ONNX)
│   │       │   ├── ranknet_train.yaml                         # LTR training (export=ONNX)
│   │       │   └── search_features_daily.yaml                 # Feature table refresh (BM25/CTR/etc.)
│   │       ├── product/
│   │       │   └── similarity_index_build.yaml                # FAISS index build (type/params/output)
│   │       ├── pricing/
│   │       │   ├── markdown_optimizer.yaml                    # OR-Tools model (constraints/objective)
│   │       │   └── elasticity_fit.yaml                        # OLS/log-log fit + guardrails
│   │       ├── assortment/
│   │       │   └── bundle_optimizer.yaml                      # Knapsack/MILP plan generation
│   │       └── campaign/
│   │           └── promotion_uplift.yaml                      # Uplift/CATE assignment (holdouts, budgets/caps, CUPED)
│   │
│   ├── jobs/                                                  # Python jobs (train/score/micro-batch) — one image per folder
│   │   ├── customer/
│   │   │   ├── clv_fit_mle/
│   │   │   │   ├── cmd/main.py                                # Entrypoint: parse cfg → run pipeline → emit params/artifacts
│   │   │   │   ├── pipeline/clv_fit_mle_pipeline.py           # Training orchestration (MLE)
│   │   │   │   ├── pipeline/clv_fit_mle_validate.py           # Job-layer validation (schema/keys/ranges/metrics)
│   │   │   │   ├── tests/test_pipeline.py                      # Unit/smoke tests (contracts & gates)
│   │   │   │   ├── pyproject.toml                             # lifetimes/scipy pins
│   │   │   │   ├── Dockerfile                                 # FROM docker/base-py.Dockerfile
│   │   │   │   └── .dockerignore                              # venv/__pycache__/data
│   │   │   ├── clv_fit_bayes/
│   │   │   │   ├── cmd/main.py
│   │   │   │   ├── pipeline/clv_fit_bayes_pipeline.py         # MAP/MCMC/VI orchestrator
│   │   │   │   ├── pipeline/clv_fit_bayes_validate.py         # Priors/diagnostics validation
│   │   │   │   ├── tests/test_pipeline.py
│   │   │   │   ├── pyproject.toml                             # PyMC/Numpyro/ArviZ pins
│   │   │   │   ├── Dockerfile
│   │   │   │   └── .dockerignore
│   │   │   ├── clv_score/
│   │   │   │   ├── cmd/main.py
│   │   │   │   ├── pipeline/clv_score_pipeline.py
│   │   │   │   ├── pipeline/clv_score_validate.py
│   │   │   │   ├── tests/test_pipeline.py
│   │   │   │   ├── pyproject.toml
│   │   │   │   ├── Dockerfile
│   │   │   │   └── .dockerignore
│   │   │   ├── personas_hdbscan/
│   │   │   │   ├── cmd/main.py
│   │   │   │   ├── pipeline/personas_hdbscan_pipeline.py
│   │   │   │   ├── pipeline/personas_hdbscan_validate.py
│   │   │   │   ├── tests/test_pipeline.py
│   │   │   │   ├── pyproject.toml                             # hdbscan/sklearn pins (RAPIDS optional)
│   │   │   │   ├── Dockerfile
│   │   │   │   └── .dockerignore
│   │   │   ├── affinities_daily/
│   │   │   │   ├── cmd/main.py
│   │   │   │   ├── pipeline/affinities_daily_pipeline.py
│   │   │   │   ├── pipeline/affinities_daily_validate.py
│   │   │   │   ├── tests/test_pipeline.py
│   │   │   │   ├── pyproject.toml                             # river/sklearn pins
│   │   │   │   ├── Dockerfile
│   │   │   │   └── .dockerignore
│   │   │   ├── churn_train/
│   │   │   │   ├── cmd/main.py
│   │   │   │   ├── pipeline/churn_train_pipeline.py
│   │   │   │   ├── pipeline/churn_train_validate.py
│   │   │   │   ├── tests/test_pipeline.py
│   │   │   │   ├── pyproject.toml                             # xgboost/lightgbm pins
│   │   │   │   ├── Dockerfile
│   │   │   │   └── .dockerignore
│   │   │   ├── churn_score/
│   │   │   │   ├── cmd/main.py
│   │   │   │   ├── pipeline/churn_score_pipeline.py
│   │   │   │   ├── pipeline/churn_score_validate.py
│   │   │   │   ├── tests/test_pipeline.py
│   │   │   │   ├── pyproject.toml
│   │   │   │   ├── Dockerfile
│   │   │   │   └── .dockerignore
│   │   │   ├── lifecycle_fit/
│   │   │   │   ├── cmd/main.py
│   │   │   │   ├── pipeline/lifecycle_fit_pipeline.py
│   │   │   │   ├── pipeline/lifecycle_fit_validate.py
│   │   │   │   ├── tests/test_pipeline.py
│   │   │   │   ├── pyproject.toml                             # hsmmlearn/tick pins
│   │   │   │   ├── Dockerfile
│   │   │   │   └── .dockerignore
│   │   │   ├── lifecycle_score/
│   │   │   │   ├── cmd/main.py
│   │   │   │   ├── pipeline/lifecycle_score_pipeline.py
│   │   │   │   ├── pipeline/lifecycle_score_validate.py
│   │   │   │   ├── tests/test_pipeline.py
│   │   │   │   ├── pyproject.toml
│   │   │   │   ├── Dockerfile
│   │   │   │   └── .dockerignore
│   │   │   ├── visitor_cohorts/
│   │   │   │   ├── cmd/main.py
│   │   │   │   ├── pipeline/visitor_cohorts_pipeline.py
│   │   │   │   ├── pipeline/visitor_cohorts_validate.py
│   │   │   │   ├── tests/test_pipeline.py
│   │   │   │   ├── pyproject.toml
│   │   │   │   ├── Dockerfile
│   │   │   │   └── .dockerignore
│   │   │   └── customer_signals/
│   │   │       ├── cmd/main.py
│   │   │       ├── pipeline/customer_signals_pipeline.py
│   │   │       ├── pipeline/customer_signals_validate.py
│   │   │       ├── tests/test_pipeline.py
│   │   │       ├── pyproject.toml
│   │   │       ├── Dockerfile
│   │   │       └── .dockerignore
│   │   ├── pdp/
│   │   │   ├── cross_sell_train/
│   │   │   │   ├── cmd/main.py
│   │   │   │   ├── pipeline/cross_sell_train_pipeline.py
│   │   │   │   ├── pipeline/cross_sell_train_validate.py
│   │   │   │   ├── tests/test_pipeline.py
│   │   │   │   ├── pyproject.toml
│   │   │   │   ├── Dockerfile
│   │   │   │   └── .dockerignore
│   │   │   └── cross_sell_daily/
│   │   │       ├── cmd/main.py
│   │   │       ├── pipeline/cross_sell_daily_pipeline.py
│   │   │       ├── pipeline/cross_sell_daily_validate.py
│   │   │       ├── tests/test_pipeline.py
│   │   │       ├── pyproject.toml
│   │   │       ├── Dockerfile
│   │   │       └── .dockerignore
│   │   ├── cart/
│   │   │   ├── basket_rerank_train/
│   │   │   │   ├── cmd/main.py
│   │   │   │   ├── pipeline/basket_rerank_train_pipeline.py
│   │   │   │   ├── pipeline/basket_rerank_train_validate.py
│   │   │   │   ├── tests/test_pipeline.py
│   │   │   │   ├── pyproject.toml
│   │   │   │   ├── Dockerfile
│   │   │   │   └── .dockerignore
│   │   │   ├── upsell_train/
│   │   │   │   ├── cmd/main.py
│   │   │   │   ├── pipeline/upsell_train_pipeline.py
│   │   │   │   ├── pipeline/upsell_train_validate.py
│   │   │   │   ├── tests/test_pipeline.py
│   │   │   │   ├── pyproject.toml
│   │   │   │   ├── Dockerfile
│   │   │   │   └── .dockerignore
│   │   │   └── upsell_daily/
│   │   │       ├── cmd/main.py
│   │   │       ├── pipeline/upsell_daily_pipeline.py
│   │   │       ├── pipeline/upsell_daily_validate.py
│   │   │       ├── tests/test_pipeline.py
│   │   │       ├── pyproject.toml
│   │   │       ├── Dockerfile
│   │   │       └── .dockerignore
│   │   ├── search/
│   │   │   ├── reco_towers_train/
│   │   │   │   ├── cmd/main.py
│   │   │   │   ├── pipeline/reco_towers_train_pipeline.py
│   │   │   │   ├── pipeline/reco_towers_train_validate.py
│   │   │   │   ├── tests/test_pipeline.py
│   │   │   │   ├── pyproject.toml
│   │   │   │   ├── Dockerfile
│   │   │   │   └── .dockerignore
│   │   │   ├── ranknet_train/
│   │   │   │   ├── cmd/main.py
│   │   │   │   ├── pipeline/ranknet_train_pipeline.py
│   │   │   │   ├── pipeline/ranknet_train_validate.py
│   │   │   │   ├── tests/test_pipeline.py
│   │   │   │   ├── pyproject.toml
│   │   │   │   ├── Dockerfile
│   │   │   │   └── .dockerignore
│   │   │   └── search_features_daily/
│   │   │       ├── cmd/main.py
│   │   │       ├── pipeline/search_features_daily_pipeline.py
│   │   │       ├── pipeline/search_features_daily_validate.py
│   │   │       ├── tests/test_pipeline.py
│   │   │       ├── pyproject.toml
│   │   │       ├── Dockerfile
│   │   │       └── .dockerignore
│   │   ├── product/
│   │   │   └── similarity_index_build/
│   │   │       ├── cmd/main.py
│   │   │       ├── pipeline/similarity_index_build_pipeline.py
│   │   │       ├── pipeline/similarity_index_build_validate.py
│   │   │       ├── tests/test_pipeline.py
│   │   │       ├── pyproject.toml
│   │   │       ├── Dockerfile
│   │   │       └── .dockerignore
│   │   ├── pricing/
│   │   │   ├── markdown_optimizer/
│   │   │   │   ├── cmd/main.py
│   │   │   │   ├── pipeline/markdown_optimizer_pipeline.py
│   │   │   │   ├── pipeline/markdown_optimizer_validate.py
│   │   │   │   ├── tests/test_pipeline.py
│   │   │   │   ├── pyproject.toml                             # ortools/pyomo pins
│   │   │   │   ├── Dockerfile
│   │   │   │   └── .dockerignore
│   │   │   └── elasticity_fit/
│   │   │       ├── cmd/main.py
│   │   │       ├── pipeline/elasticity_fit_pipeline.py
│   │   │       ├── pipeline/elasticity_fit_validate.py
│   │   │       ├── tests/test_pipeline.py
│   │   │       ├── pyproject.toml                             # statsmodels pins
│   │   │       ├── Dockerfile
│   │   │       └── .dockerignore
│   │   └── assortment/
│   │   │    └── bundle_optimizer/
│   │   │       ├── cmd/main.py
│   │   │       ├── pipeline/bundle_optimizer_pipeline.py
│   │   │       ├── pipeline/bundle_optimizer_validate.py
│   │   │       ├── tests/test_pipeline.py
│   │   │       ├── pyproject.toml
│   │   │       ├── Dockerfile
│   │   │       └── .dockerignore
│   │   ├── campaign/
│   │       └── promotion_uplift/
│   │           ├── cmd/main.py
│   │           ├── pipeline/promotion_uplift_pipeline.py
│   │           ├── pipeline/promotion_uplift_validate.py 
│   │           ├── tests/test_pipeline.py
│   │           ├── pyproject.toml
│   │           ├── Dockerfile
│   │           └── .dockerignore
│   │
│   ├── schemas/                                               # JSON Schemas (contract for outputs & params)
│   │   ├── models/
│   │   │   ├── affinity_edges.schema.json                     # Edge table contract
│   │   │   ├── customer_segments.schema.json
│   │   │   ├── product_signals.schema.json
│   │   │   ├── tiers_clv.schema.json
│   │   │   ├── cross_sell.schema.json
│   │   │   ├── upsell_scores.schema.json
│   │   │   ├── rank_weights.schema.json                       # Per-feature weights: (store_id, feature, model_version, as_of_ts)
│   │   │   ├── similarity_artifacts.schema.json               # FAISS artifact metadata rows
│   │   │   ├── visitor_cohorts.schema.json
│   │   │   ├── customer_signals.schema.json
│   │   │   ├── markdown_plans.schema.json
│   │   │   ├── elasticity.schema.json
│   │   │   ├── bundles.schema.json
│   │   │   ├── personas.schema.json
│   │   │   ├── churn_risk.schema.json
│   │   │   ├── lifecycle_state.schema.json
│   │   │   └── promotion_assignments.schema.json              # NEW: Uplift assignment output contract
│   │   └── params/
│   │       ├── clv_params.schema.json
│   │       ├── reco_towers_params.schema.json
│   │       ├── ranknet_params.schema.json
│   │       ├── upsell_params.schema.json
│   │       ├── cross_sell_params.schema.json
│   │       ├── affinities_params.schema.json
│   │       ├── hsmm_params.schema.json
│   │       ├── markdown_params.schema.json
│   │       ├── elasticity_params.schema.json
│   │       ├── bundle_params.schema.json
│   │       └── uplift_params.schema.json                      # NEW: Promotion uplift job parameter contract
│   │
│   └── signals/                                               # Go service (GraphQL/gRPC) + embedded engines (cgo)
│       ├── cmd/main.go                                        # Boot: load configs, open stores, load artifacts, /healthz, /readyz
│       ├── gqlgen.yml                                         # GraphQL codegen config (stable paths)
│       ├── internal/
│       │   ├── graph/
│       │   │   └── schema/
│       │   │       ├── cross_sell.graphqls                    # PDP complements API
│       │   │       ├── cross_sell.resolver.go
│       │   │       ├── upsell.graphqls                        # Cart/checkout upsell API
│       │   │       ├── upsell.resolver.go
│       │   │       ├── similar.graphqls                       # Item neighbors API
│       │   │       ├── similar.resolver.go
│       │   │       ├── search_rank.graphqls                   # PLP/Search ranking API
│       │   │       ├── search_rank.resolver.go
│       │   │       ├── basket.graphqls                        # Basket suggestions API
│       │   │       ├── basket.resolver.go
│       │   │       ├── ops.graphqls                           # OpsStatus/version/reload
│       │   │       └── ops.resolver.go
│       │   ├── models/                                        # DTO structs (no business logic)
│       │   │   ├── cross_sell.go
│       │   │   ├── upsell.go
│       │   │   ├── similar.go
│       │   │   ├── search_rank.go
│       │   │   └── basket.go
│       │   ├── services/                                      # Read-only guards + embedded inference + shaping
│       │   │   ├── cross_sell_service.go
│       │   │   ├── upsell_service.go
│       │   │   ├── similar_service.go
│       │   │   ├── search_rank_service.go
│       │   │   └── basket_service.go
│       │   ├── store/                                         # Read-only DAL (PG/CH)
│       │   │   ├── clickhouse/
│       │   │   │   ├── similar_store_ch.go                    # CH-backed neighbor reads for similar
│       │   │   │   └── basket_store_ch.go                     # (If used) CH features for basket
│       │   │   ├── postgres/
│       │   │   │   ├── cross_sell_store_pg.go
│       │   │   │   ├── upsell_store_pg.go
│       │   │   │   ├── search_rank_store_pg.go
│       │   │   │   └── basket_store_pg.go
│       │   │   ├── factory.go                                 # Binding checks + freshness probes
│       │   │   └── interfaces.go                              # Store interfaces (PG/CH)
│       │   ├── validators/                                    # Request validators (shape/paging/tenancy ONLY)
│       │   │   ├── cross_sell_validator.go
│       │   │   ├── upsell_validator.go
│       │   │   ├── similar_validator.go
│       │   │   ├── search_rank_validator.go
│       │   │   └── basket_validator.go
│       │   ├── engines/                                       # In-process native engines (C/C++) via cgo
│       │   │   ├── README.md                                   # Which models use which engine; env knobs; linking notes
│       │   │   ├── faiss/
│       │   │   │   ├── faiss.go                               # Load/query FAISS index (used by #7, #12)
│       │   │   │   └── faiss.h                                # Vendored header (if needed)
│       │   │   ├── onnxrt/
│       │   │   │   ├── onnxrt.go                              # ONNX Runtime session/load/run (used by #2, #3, #8, #11)
│       │   │   │   └── onnxrt.h
│       │   │   └── gbdt/
│       │   │       ├── gbdt.go                                # LightGBM/XGBoost/CatBoost C API bridge (optional for #11)
│       │   │       └── gbdt.h
│       │   ├── loaders/                                       # Model/artifact loading + hot-reload
│       │   │   ├── registry.go                                # Fetch artifacts from models/registry or object store
│       │   │   ├── rcu.go                                     # Lock-free pointer swaps on reload
│       │   │   └── metrics.go                                 # engine_ready/model_version gauges
│       │   ├── metrics/
│       │   │   └── prom.go                                    # Prometheus collectors & HTTP handlers
│       │   └── logging/
│       │       └── log.go                                     # Zap/logrus setup; request IDs
│       ├── proto/                                             # (Optional) internal gRPC IDL (Buf-managed)
│       │   ├── buf.yaml                                       # Buf workspace config
│       │   ├── buf.gen.yaml                                   # Codegen targets (go, grpc)
│       │   ├── cross_sell.proto
│       │   ├── upsell.proto
│       │   ├── similar.proto
│       │   └── search_rank.proto
│       └── Dockerfile                                         # Signals image (CGO + native libs)
│
├── models                                                     # Language-agnostic model registry (versioned artifacts written at runtime)
│   └── registry/
│       ├── ltr_ranker/                                        # Artifact family (ONNX) for search/PLP ranker
│       ├── product_embeddings/                                # Artifact family (FAISS index) for similarity/candidates
│       ├── clv_bgnbd/                                         # Artifact family (params.json) for CLV
│       ├── upsell_gbm/                                        # Artifact family (ONNX or native GBDT files)
│       ├── basket_rerank/                                     # Artifact family (ONNX) for basket re-ranker
│       ├── promotion_uplift/                                  # (Usually table output; family reserved if artifacts stored)
│       └── .gitkeep                                           # Keep folder in VCS without committing artifacts
│
├── deploy                                                     # IaC (Kubernetes manifests)
│   ├── k8s/
│   │   ├── base/                                              # (Optional) Kustomize base (shared manifests)
│   │   │   ├── kustomization.yaml
│   │   │   ├── signals-deployment.yaml                        # Base Deployment (no env overrides)
│   │   │   ├── signals-service.yaml                           # Base Service/Ingress
│   │   │   └── jobs/                                          # (Optional) Base CronJobs if templating schedules
│   │   ├── overlays/                                          # Per-env overlays (dev/staging/prod)
│   │   │   ├── dev/
│   │   │   │   └── kustomization.yaml                         # Image tags, replicas=1, debug probes
│   │   │   ├── staging/
│   │   │   │   └── kustomization.yaml                         # Canary weights, SLO pre-prod
│   │   │   └── prod/
│   │   │       └── kustomization.yaml                         # Hardened limits, PDB, HPA
│   │   ├── jobs/                                              # One CronJob per Python job
│   │   │   ├── customer-clv-fit-mle-cronjob.yaml
│   │   │   ├── customer-clv-fit-bayes-cronjob.yaml
│   │   │   ├── customer-clv-score-cronjob.yaml
│   │   │   ├── customer-personas-hdbscan-cronjob.yaml
│   │   │   ├── customer-affinities-daily-cronjob.yaml
│   │   │   ├── customer-churn-train-cronjob.yaml
│   │   │   ├── customer-churn-score-cronjob.yaml
│   │   │   ├── customer-lifecycle-fit-cronjob.yaml
│   │   │   ├── customer-lifecycle-score-cronjob.yaml
│   │   │   ├── customer-visitor-cohorts-cronjob.yaml
│   │   │   ├── customer-customer-signals-cronjob.yaml         # Aggregator job (ETL support)
│   │   │   ├── search-reco-towers-train-cronjob.yaml
│   │   │   ├── search-ranknet-train-cronjob.yaml
│   │   │   ├── search-search-features-daily-cronjob.yaml
│   │   │   ├── product-similarity-index-build-cronjob.yaml
│   │   │   ├── pdp-cross-sell-train-cronjob.yaml
│   │   │   ├── pdp-cross-sell-daily-cronjob.yaml
│   │   │   ├── cart-basket-rerank-train-cronjob.yaml
│   │   │   ├── cart-upsell-train-cronjob.yaml
│   │   │   ├── cart-upsell-daily-cronjob.yaml
│   │   │   ├── pricing-markdown-optimizer-cronjob.yaml
│   │   │   ├── pricing-elasticity-fit-cronjob.yaml
│   │   │   ├── assortment-bundle-optimizer-cronjob.yaml
│   │   │   └── campaign-promotion-uplift-cronjob.yaml         # NEW: Uplift assignment job
│   │   ├── secrets/
│   │   │   ├── core-dsns.yaml                                 # CORE_PG_DSN / CORE_CH_DSN (sealed or external)
│   │   │   └── signals-dsns.yaml                              # SIGNALS_PG_DSN / SIGNALS_CH_DSN
│   │   ├── policies/                                          # Security/resource hardening (enterprise polish)
│   │   │   ├── networkpolicy.yaml                             # Restrict egress/ingress to DBs/ingress
│   │   │   ├── pdb.yaml                                       # PodDisruptionBudget for signals
│   │   │   ├── hpa.yaml                                       # HorizontalPodAutoscaler for signals
│   │   │   └── rbac.yaml                                      # ServiceAccount/Role/RoleBinding
│   │   └── services/
│   │       ├── signals-deployment.yaml                        # Single-container Go (CGO) + native libs
│   │       └── signals-service.yaml                           # ClusterIP/Ingress
│   └── observability/
│       ├── prometheus-scrape.yaml                             # Scrape jobs & signals endpoints
│       └── alerting-rules.yaml                                # Alerts for SLO breaches/engine readiness
│
├── dashboards/
│   └── analytics-ops.json                                     # Grafana: dataset freshness + job metrics + engine readiness
│
├── docs/
│   ├── registry-policy.md                                     # Artifact versioning/promotion policy
│   ├── safety.yaml                                            # Data/PII handling policy
│   └── RUNBOOK.md                                             # Ops runbook (stale data/boot fail/backfill)
│
├── env/
│   ├── .gitkeep
│   └── .env.example                                           # Local-only example (non-secrets)
│
├── docker/
│   ├── base-py.Dockerfile                                     # Python base (py311 + BLAS/wheels), speeds job builds
│   └── base-go.Dockerfile                                     # Go base (build-essential + CGO)
│
├── scripts/
│   ├── build_signals.sh                                       # Repro CGO build (lib paths, tags)
│   ├── build_job.sh                                           # Generic per-job docker build/push
│   └── fetch_artifact.sh                                      # Pull artifact to ./models for local dev
│
├── tests/
│   ├── e2e_signals_test.go                                    # Black-box GraphQL tests (contracts & latency budgets)
│   └── data_smoke/                                            # Tiny fixtures for CI
│
└── .github/
    └── workflows/
        ├── build-signals.yml                                  # Go (CGO) build/test/publish
        ├── build-python-jobs.yml                              # Matrix over analytics/jobs/** (unit+image)
        └── deploy.yml                                         # CD to clusters (applies deploy/k8s manifests)












BLOCK 2 — AUTHORITATIVE GUIDE
Canonical, implementation-ready narrative for the repository you just approved in Block 1. No code; pure explanation with the right level of detail so a fresh engineer (or future you) can implement and operate this system correctly.

⸻

0) How to read this
	•	This guide mirrors the Block 1 tree and explains what every folder and file is for, which language runs where, which models use which tools, and how data moves (read/validate/write/serve).
	•	We separate training (offline) from serving (online) and call out nearline refreshers explicitly.
	•	We identify the six online model families that require embedded C++ engines for low-latency inference and show where those engines live (inside the Go service via cgo).
	•	We enforce consistent tenancy & keys, config governance, and SLO/readiness rules.

⸻

1) Operating model (the “what/why” in one page)

Jobs (Python) — offline/nearline compute
	•	All heavy work happens here: feature joins/aggregations, training/fitting, MILP/DP optimizations, graph mining, FAISS index builds, batch/micro-batch scoring.
	•	Every job has a job-layer validator (schema/types/keys/ranges/freshness/metric gates). Jobs fail fast on validation or metric breaches (no writes).
	•	Jobs publish tables (PG/CH) and artifacts (ONNX/FAISS/params.json) into the registry.

Signals (Go) — online serving
	•	Single service exposing GraphQL for six online surfaces: #2, #3, #7, #8, #11, #12. Everything else is batch/micro-batch (admin previews optional).
	•	Request validators (shape/paging/tenancy) → Service guards (stock/eligibility/freshness/caps, read-only) → in-memory inference using embedded C++ engines (ONNX Runtime, FAISS, native GBDT) → shape/paginate → respond.
	•	No sidecars. Engines are linked in-process via cgo for the lowest p95/p99.

Tenancy & keys (non-negotiable)
	•	Keys always lead with store_id. Add tenant_id only when cross-store semantics require it; do not replace store_id.
	•	Output tables and artifacts carry as_of/as_of_ts and model_version for determinism. Unique indexes reflect composite keys.

Online vs offline vs nearline
	•	Offline: training/fit/solve runs on historical data (scheduled).
	•	Online: per-request inference in Signals (≤100–200 ms p95).
	•	Nearline: frequent, small jobs to keep online features fresh (e.g., ≤120 s TTL) without training online.

⸻

2) Languages & runtimes (who does what, and why)

Layer	Language	Why it’s chosen	What runs here
Jobs	Python	Best library coverage for your 15 models; C/CUDA kernels under the hood; fastest path to correct models	All training/fitting, index builds, batch/micro-batch scoring, optimization, feature ETL
Service	Go	Simple, reliable, fast service layer; GraphQL + clean concurrency; great ops	Request validation, read-only guards, calling in-process native engines, shaping/pagination
Engines	C/C++ (embedded)	Lowest latency & memory using vendor runtimes (ONNX Runtime, FAISS, native GBDT)	Inference for six online model families

You will not see large C++ codebases in the repo. We link vendor shared libraries and call them via thin Go wrappers. If we ever need a small C/C++ shim (rare), it belongs under analytics/native/cpp/<engine>/src with headers in analytics/native/include/<engine>/.

⸻

3) Model families — the canonical mapping (1-15)

For each model: purpose, serve mode, inputs/outputs, keys, configs/schemas, training libs (Python), inference path, knobs (where to place them), and datastores.

1) Customer CLV (BG/NBD + Gamma–Gamma; variant Pareto/NBD Bayes)
	•	Purpose: 6–12 m margin forecast; tiers (VIP/High/Med/Low).
	•	Serve: batch (cached reads).
	•	Jobs: customer/clv_fit_mle, customer/clv_fit_bayes, customer/clv_score.
	•	Training libs: lifetimes (BG/NBD + GG), PyMC-Marketing (Pareto/NBD Bayes).
	•	Inference: batch table; no online scoring.
	•	Outputs: tiers_clv (see analytics/schemas/models/tiers_clv.schema.json).
	•	Keys: (store_id, customer_id, as_of_date, model_version).
	•	Config: configs/models/customer/{clv_fit_mle,clv_fit_bayes,clv_score}.yaml.
	•	Knobs: job (clv_score.yaml): bootstrap_B, optional returns_factor.
	•	Data: read raw orders (Mongo), write tiers_clv (PG).

2) Two-stage Recommender (retrieval) + LTR ranking (PDP/PLP)
	•	Purpose: candidate retrieval & LTR ranking under stock/exposure/margin.
	•	Serve: online.
	•	Jobs: search/reco_towers_train (export ONNX), search/search_features_daily (nearline features).
	•	Training libs: TensorFlow Recommenders; TensorFlow Ranking / LightGBM / XGBoost / CatBoost.
	•	Inference: Go + ONNX Runtime (ranker) and FAISS (retrieval) in-process.
	•	GraphQL: search_rank.graphqls + resolver/service.
	•	Config: configs/models/search/{reco_towers_train,search_features_daily}.yaml; serving guards in configs/signals.yaml → search_rank.
	•	Knobs: freshness_sec, cap_per_seller, promo_fresh_sec, demote_returns_pct (service guards).
	•	Data: reads PG/CH features, returns ranked lists.

3) Basket / Session Re-rank (Cart)
	•	Purpose: add-on suggestions without harming baseline CVR.
	•	Serve: online.
	•	Jobs: cart/basket_rerank_train (export ONNX).
	•	Training libs: TensorFlow Ranking / LightGBM Ranker.
	•	Inference: Go + ONNX Runtime.
	•	GraphQL: basket.graphqls + resolver/service.
	•	Config: configs/models/cart/basket_rerank_train.yaml; guards in signals.yaml → basket.
	•	Knobs: lambda_cvr_guard, low_stock_days, cap_per_seller (service guards).
	•	Data: reads product/session features (PG/CH).

4) Promotion Uplift (multi-treatment, user-level)
	•	Purpose: maximize incremental GM under budget/caps; persistent holdouts.
	•	Serve: batch (activation export; optional read-only admin preview later).
	•	Job: campaign/promotion_uplift.
	•	Training libs: CausalML / EconML (uplift/CATE), sklearn/pandas/numpy.
	•	Outputs: promotion_assignments (see schema).
	•	Keys: (store_id, user_id, as_of, model_version); add campaign_id if concurrent campaigns.
	•	Config: configs/models/campaign/promotion_uplift.yaml.
	•	Knobs: job: budget, cap_per_arm, cuped_pre_metric_days.
	•	Data: reads offers log with holdouts, CUPED pre-metric, RFME; writes assignments to PG.

5) Customer Personas (HDBSCAN / K-Means)
	•	Purpose: stable behavioral segments for messaging/merch.
	•	Serve: batch (labels cached).
	•	Job: customer/personas_hdbscan.
	•	Training libs: hdbscan; scikit-learn (KMeans); optional RAPIDS HDBSCAN for GPU scale.
	•	Outputs: customer_segments.
	•	Keys: (store_id, customer_id, as_of_date, model_version).
	•	Config: configs/models/customer/personas_hdbscan.yaml.
	•	Knobs: min_cluster_size, stability_min.

6) Affinities (Brand/Category; time-decayed)
	•	Purpose: top-K targeting tags (brand/category).
	•	Serve: daily batch.
	•	Job: customer/affinities_daily.
	•	Training libs: scikit-learn Naive Bayes (Dirichlet smoothing); river for streaming patterns.
	•	Outputs: affinity_edges.
	•	Keys: (store_id, customer_id, brand_id|category_id, as_of_date, model_version).
	•	Config: configs/models/customer/affinities_daily.yaml.
	•	Knobs: half_life_days, alpha, weight_purchase.

7) Product Similarity / ANN
	•	Purpose: neighbors & clusters for discovery/bundling/complements.
	•	Serve: online.
	•	Job: product/similarity_index_build (build FAISS index).
	•	Training libs: FAISS tooling (Python) to build indexes; CH/PG for co-occurrence sources.
	•	Inference: Go + FAISS.
	•	GraphQL: similar.graphqls + service.
	•	Config: configs/models/product/similarity_index_build.yaml; guards in signals.yaml → similar.
	•	Knobs: k, exclude_substitutes, low_stock_days (service guards).

8) PLP/Search Ranking (LTR)
	•	Purpose: rank search/PLP results for nDCG@K/GM lift.
	•	Serve: online.
	•	Jobs: search/ranknet_train (export ONNX), search/search_features_daily (nearline).
	•	Training libs: TensorFlow Ranking; LightGBM/XGBoost/CatBoost.
	•	Inference: Go + ONNX Runtime.
	•	GraphQL: search_rank.graphqls + service.
	•	Config: configs/models/search/{ranknet_train,search_features_daily}.yaml; guards in signals.yaml → search_rank.
	•	Knobs: training knobs (job); cap_per_seller, promo_fresh_sec (service guards).

9) Markdown Optimizer (DP/MILP)
	•	Purpose: maximize terminal GM & sell-through by deadline.
	•	Serve: batch.
	•	Job: pricing/markdown_optimizer.
	•	Training libs: OR-Tools CP-SAT; Pyomo/CVXPY as needed.
	•	Outputs: markdown_plans.
	•	Keys: (store_id, product_id, effective_date, model_version).
	•	Config: configs/models/pricing/markdown_optimizer.yaml.
	•	Knobs: quantile, guard_quantile, min_margin_pct.

10) Price Elasticity (gated)
	•	Purpose: base price planning (not promo/markdown).
	•	Serve: batch.
	•	Job: pricing/elasticity_fit.
	•	Training libs: statsmodels OLS; scikit-learn; Lerner guardrails.
	•	Outputs: elasticity table.
	•	Keys: (store_id, product_id, week|as_of_date, model_version).
	•	Config: configs/models/pricing/elasticity_fit.yaml.
	•	Knobs: min_price_points, min_r2.

11) Upsell Propensity (profit-guarded)
	•	Purpose: show upsells that increase GM without hurting base CVR.
	•	Serve: online (+ daily nearline eligibility).
	•	Jobs: cart/upsell_train (export ONNX or native GBDT); cart/upsell_daily (eligibility).
	•	Training libs: scikit-learn; LightGBM/XGBoost/CatBoost.
	•	Inference: Go + ONNX Runtime or Go + native GBDT C API.
	•	GraphQL: upsell.graphqls + service.
	•	Config: configs/models/cart/{upsell_train,upsell_daily}.yaml; guards in signals.yaml → upsell.
	•	Knobs: training (lambda, base_gm_source); service guard (min_margin_cents).

12) Cross-sell (Complements)
	•	Purpose: complementary products; avoid substitutes/low stock.
	•	Serve: online (+ daily materialization).
	•	Jobs: pdp/cross_sell_train, pdp/cross_sell_daily.
	•	Training libs: mlxtend (Apriori/rules); PyG/Node2Vec if using embeddings.
	•	Inference: Go + FAISS (where embeddings are used) + rules.
	•	GraphQL: cross_sell.graphqls + service.
	•	Config: configs/models/pdp/{cross_sell_train,cross_sell_daily}.yaml; guards in signals.yaml → cross_sell.
	•	Knobs: exclude_substitutes, cap_per_category, low_stock_days (service guards).

13) Product Bundling Optimizer (Knapsack/MILP)
	•	Purpose: move slow-movers with hero while protecting hero GM.
	•	Serve: batch.
	•	Job: assortment/bundle_optimizer.
	•	Training libs: OR-Tools CP-SAT.
	•	Outputs: bundles.
	•	Keys: (store_id, bundle_id|product_id, effective_date, model_version).
	•	Config: configs/models/assortment/bundle_optimizer.yaml.
	•	Knobs: max_per_hero, min_hero_gm_cents, brand_rules.

14) Churn Propensity
	•	Purpose: flag at-risk users; treat when net positive.
	•	Serve: weekly batch.
	•	Jobs: customer/churn_train, customer/churn_score.
	•	Training libs: scikit-learn; LightGBM/XGBoost/CatBoost.
	•	Outputs: churn_risk.
	•	Keys: (store_id, customer_id, as_of_date, model_version).
	•	Config: configs/models/customer/{churn_train,churn_score}.yaml.
	•	Knobs: gain_cents, cost_cents, suppression_days.

15) Lifecycle Timing (HSMM; Hawkes optional)
	•	Purpose: detect state transitions (Active→At-Risk→Lapsed) for win-backs.
	•	Serve: micro-batch (triggers ≤120 s).
	•	Jobs: customer/lifecycle_fit, customer/lifecycle_score.
	•	Training libs: hsmmlearn / pyhsmm; tick for Hawkes.
	•	Outputs: lifecycle_state.
	•	Keys: (store_id, customer_id, as_of_date, model_version).
	•	Config: configs/models/customer/{lifecycle_fit,lifecycle_score}.yaml.
	•	Knobs: theta, min_weeks_in_state.

⸻

4) Engines & performance (who uses what at serve time)

Engine (embedded)	Used by models	Why
ONNX Runtime (C/C++)	#2 Two-tower/LTR, #3 Basket re-rank, #8 PLP/Search LTR, #11 Upsell	Fast, portable inference for DNN/GBDT models; supports CPU/GPU; stable ABI
FAISS (C/C++)	#7 Similarity/ANN, #12 Cross-sell	State-of-the-art ANN search; IVF/HNSW/PQ; GPU options
Native GBDT C API (LightGBM/XGBoost/CatBoost)	#11 Upsell (optional path instead of ONNX)	Ultra-fast tree inference with tiny memory and no conversion

Where these live: analytics/signals/internal/engines/{onnxrt,faiss,gbdt} (Go wrappers via cgo; vendor .so/.a linked in Signals Docker image).
Why embed: remove network hops, cut FFI overhead, expose thread controls, and keep p95/p99 tight.

⸻

5) Config governance (where the knobs are)
	•	Job-time knobs (training/materialization): set in analytics/configs/models/<domain>/<job>.yaml; schema-checked by analytics/schemas/params/*.schema.json. Take effect on next scheduled run.
	•	Service-time knobs/guards (request behavior): set in analytics/configs/signals.yaml under surface blocks (search_rank, basket, upsell, cross_sell, similar). Applied after request validation; hot-reload or restart Signals to apply.

Concrete examples
	•	Rank weights table is per-feature, not per query/product: key = (store_id, feature, model_version, as_of_ts) (optional feature="intercept"). Per-query/product features, if materialized, live in separate tables and are not “rank weights.”
	•	Promotion uplift knobs (job): budget, cap_per_arm, cuped_pre_metric_days.
	•	Basket guards (service): lambda_cvr_guard, low_stock_days, cap_per_seller.

⸻

6) Database pipeline (read/validate/write and serve)

Jobs (Python) — read/transform/validate/write
	•	Declare I/O in each job’s YAML (configs/models/**).
	•	Read via pycommon/datastore_pg.py / datastore_ch.py (and Mongo sources through your app pipelines or connectors).
	•	Validate via pipeline/*_validate.py: schema/types, composite keys, ranges/nulls, freshness/min-rows, bounded referential checks, and metric gates (e.g., AUUC/Qini > 0 for uplift).
	•	Write with upserts (PG) or partitioned inserts (CH). Unique indexes (DB) + job-level dedupe ensure idempotence.

Signals (Go) — read-only serve
	•	Request validators (shape/paging/tenancy only): analytics/signals/internal/validators/*.go.
	•	Service guards (post-validation, read-only): stock/eligibility/caps and freshness TTL from signals.yaml.
	•	Store access: signals/internal/store/{postgres,clickhouse} with factory.go + interfaces.go.
	•	Inference: in-process engines (internal/engines/**); results shaped/paginated.

Secrets/DSNs
	•	deploy/k8s/secrets/{core-dsns.yaml,signals-dsns.yaml} → env vars → read in Go (common/config/load.go) and Python (pycommon/config_loader.py).

⸻

7) Keys & tenancy (repeat, to avoid future drift)
	•	Always lead with store_id in composite keys and indexes. Add tenant_id only when the business requires cross-store semantics.
	•	Representative keys:
	•	CLV tiers: (store_id, customer_id, as_of_date, model_version)
	•	Cross-sell edges: (store_id, hero_sku, complement_sku, as_of_date, model_version)
	•	Upsell scores: (store_id, cart_id|user_id, product_id, as_of_ts, model_version)
	•	Rank weights (per-feature): (store_id, feature, model_version, as_of_ts)
	•	Uplift assignments: (store_id, user_id, as_of, model_version) (+ campaign_id if concurrent)

⸻

8) Validators vs guards (clean separation)
	•	Job validators (Python): dataset contracts + metric gates before write. Can drop/quarantine or fail fast (no writes).
	•	Service validators (Go): request shape only (required args, enums, paging caps, tenancy). Read-only; bad input → 4xx.
	•	Service guards (Go): stock/eligibility/freshness, caps/diversity; return a fallback or 503 on staleness. Never mutate.

⸻

9) Readiness & SLOs (what makes /readyz pass/fail)
	•	/readyz passes when: embedded engines are loaded with the current artifacts, required datasets are fresh (TTL met), stores healthy, configs valid, caches warmed.
	•	/readyz fails when: artifacts missing/corrupt, engine load error, datasets stale beyond TTL, stores unhealthy, or config invalid.
	•	A single job failure does not flip /readyz directly; it only does so indirectly if freshness falls out of SLO (guards will trip and readiness will reflect it).

⸻

10) CI/CD, images, and tests (why the files exist)
	•	Base images: docker/base-py.Dockerfile (Python + BLAS/wheels), docker/base-go.Dockerfile (Go + CGO). These speed repeatable builds.
	•	Pipelines:
	•	.github/workflows/build-python-jobs.yml: lint (ruff/mypy), unit tests, build/publish per job.
	•	.github/workflows/build-signals.yml: CGO build, unit tests, publish image.
	•	.github/workflows/deploy.yml: apply deploy/k8s (raw or Kustomize overlays).
	•	Tests: tests/e2e_signals_test.go — black-box GraphQL contract & latency checks; tests/data_smoke/ — tiny fixtures for CI.

⸻

11) Security & compliance basics (what we enforce)
	•	No secrets in repo; DSNs via K8s secrets and env.
	•	NetworkPolicy: restrict egress/ingress only to DBs/ingress controllers.
	•	RBAC: least-privilege for Signals and CronJobs.
	•	PDB/HPA: keep service available under disruptions; autoscale if needed.
	•	Data policy: docs/safety.yaml — PII handling, retention, and masking.

⸻

12) Quick install mindset (for later implementation guides)

When you begin writing the “how to implement” READMEs per folder/file:
	•	Jobs: list Python packages per job (lifetimes, PyMC-Marketing, CausalML/EconML, hdbscan, river, scikit-learn, xgboost/lightgbm/catboost, ortools, pyomo/cvxpy, pytorch-geometric if used, faiss-cpu/gpu for builders).
	•	Signals: note Go modules and how to link ONNX Runtime, FAISS, and GBDT C APIs via cgo (env flags, LD paths).
	•	Engines README: define which models map to which engine, how to set threads (intra/inter-op), and whether GPU variants are in use.

⸻

13) Relationships at a glance (one-screen matrix)

Family	Jobs (Python)	Outputs (tables/artifacts)	GraphQL	Engines in Signals	Config knobs (job vs service)	Data stores
1 CLV	clv_fit_mle, clv_fit_bayes, clv_score	tiers_clv (PG)	—	—	bootstrap_B, returns_factor (job)	Mongo→PG
2 Two-tower/LTR	reco_towers_train, search_features_daily	model.onnx (registry), search features (CH/PG)	✅ search_rank	ONNX RT (+ FAISS for retrieval)	service: freshness/caps/promo guards	CH/PG/registry
3 Basket	basket_rerank_train	model.onnx (registry)	✅ basket	ONNX RT	service: CVR guard, low stock, caps	CH/PG/registry
4 Uplift	promotion_uplift	promotion_assignments (PG)	—	—	job: budget/caps/CUPED days	PG
5 Personas	personas_hdbscan	customer_segments (PG)	—	—	job: min_cluster_size, stability_min	CH/PG
6 Affinities	affinities_daily	affinity_edges (CH/PG)	—	—	job: half_life_days, alpha	CH/PG
7 Similarity	similarity_index_build	index.faiss (registry)	✅ similar	FAISS	service: k, exclude_substitutes, low_stock	CH/PG/registry
8 LTR	ranknet_train, search_features_daily	model.onnx (registry), features	✅ search_rank	ONNX RT	job+service split	CH/PG/registry
9 Markdown	markdown_optimizer	markdown_plans (PG)	—	—	job: quantile, guard_quantile	PG
10 Elasticity	elasticity_fit	elasticity (PG)	—	—	job: min_price_points, min_r2	PG
11 Upsell	upsell_train, upsell_daily	model.onnx or native GBDT; upsell table	✅ upsell	ONNX RT or GBDT C API	job: lambda/base_gm; service: min_margin_cents	PG/registry
12 Cross-sell	cross_sell_train, cross_sell_daily	complements table (PG/CH); embeddings (optional)	✅ cross_sell	FAISS (if embeddings) + rules	service: exclude_subs, caps, low_stock	CH/PG/registry
13 Bundles	bundle_optimizer	bundles (PG)	—	—	job: max_per_hero, min_hero_gm, brand_rules	PG
14 Churn	churn_train, churn_score	churn_risk (PG)	—	—	job: gain_cents, cost_cents, suppression_days	PG
15 Lifecycle	lifecycle_fit, lifecycle_score	lifecycle_state (PG)	—	—	job: theta, min_weeks_in_state	PG


⸻

14) Folder/file purpose (index back to Block 1 tree)
	•	analytics/common/* — Go utilities used by Signals (config loader, PG/CH clients, time windows).
	•	analytics/pycommon/* — Shared Python package for all jobs (config IO, datastore IO, features, validation, logging, metrics).
	•	analytics/native/* — Optional vendoring/build notes for native libs (FAISS/ONNX RT/GBDT); only docs/CMake/BUILD notes unless we truly add shims.
	•	analytics/configs/signals.yaml — All request-time service guards (freshness caps, business caps, eligibility toggles).
	•	analytics/configs/models/<domain>/*.yaml — Each job’s input sources, parameters, outputs, SLOs. Truth lives here; code just executes the plan.
	•	analytics/jobs/** — One folder per job. Each has cmd/main.py, pipeline/*_pipeline.py, pipeline/*_validate.py, tests/test_pipeline.py, pyproject.toml, Dockerfile, .dockerignore.
	•	analytics/schemas/models/*.schema.json — Output table contracts (columns, types, key fields).
	•	analytics/schemas/params/*.schema.json — Parameter contracts for job configs (schema-checked before runs).
	•	analytics/signals/** — Go service. GraphQL schema/resolvers, request validators, services (guards + embedded inference), store DAL, engines (cgo wrappers), loaders (artifact fetch + hot-reload), metrics/logging, and optional proto.
	•	models/registry/* — Artifact family directories (empty in planning; jobs create versioned subfolders at publish). No versions are listed in this plan.
	•	deploy/k8s/* — CronJobs for jobs, Deployment/Service for Signals, Secrets, and production policies (NetworkPolicy, PDB, HPA, RBAC). Overlays (dev/staging/prod) optional via Kustomize.
	•	dashboards/analytics-ops.json — Grafana: freshness, job outcomes, engine readiness, latency.
	•	docs/* — Registry policy, data safety, runbook.
	•	docker/* — Base images to speed reproducible builds (Python with BLAS; Go with CGO).
	•	scripts/* — Build helpers and artifact fetcher for local tests.
	•	tests/* — Signals E2E (GraphQL p95/contracts) + tiny data fixtures.
	•	.github/workflows/* — CI definitions: build/test/publish Jobs & Signals, deploy.

⸻

15) What’s not in scope (by design)
	•	No sidecar model servers; no gRPC hops between languages for inference.
	•	No “online training” in the request path.
	•	No raw secrets in repo; only references to K8s secrets/env.

⸻

16) Ready next steps (when you want them)
	•	Per-folder Implementation Guides (no code yet) that enumerate exact packages to install (with links), expected env vars, and operational runbooks (build/run/rollbacks).
	•	Minimal engines/README.md in Signals to record model→engine mapping and thread/env knobs.

⸻

This is the single source of truth for your analytics system.
It ties models→jobs→artifacts/tables→service endpoints→engines→configs→schemas→SLOs→deploy, with clear language choices and performance rationale.


Great catch. It’s in the guide (Section “Config governance” and each model’s entry), but to make it unmissable, here’s the single, consolidated map of your Signals → Models outline knobs to the exact config files and YAML sections. No code—just the authoritative mapping.

⸻

Where the “Signals → Models” parameters live (one-glance index)

A) Service-time guards (request-time; applied after validators)

File: analytics/configs/signals.yaml
	•	search_rank (models #2 Two-tower/LTR, #8 PLP/Search LTR)
Keys: freshness_sec, cap_per_seller, promo_fresh_sec, demote_returns_pct
Used by: analytics/signals/internal/services/search_rank_service.go
	•	basket (model #3 Basket / Session Re-rank)
Keys: lambda_cvr_guard, low_stock_days, cap_per_seller
Used by: analytics/signals/internal/services/basket_service.go
	•	similar (model #7 Product Similarity / ANN)
Keys: k, exclude_substitutes, low_stock_days
Used by: analytics/signals/internal/services/similar_service.go
	•	upsell (model #11 Upsell Propensity)
Keys: min_margin_cents, eligibility_flags (if you expose toggles)
Used by: analytics/signals/internal/services/upsell_service.go
	•	cross_sell (model #12 Cross-sell / Complements)
Keys: exclude_substitutes, cap_per_category, low_stock_days
Used by: analytics/signals/internal/services/cross_sell_service.go

Reminder: validators in analytics/signals/internal/validators/*.go handle only request shape/paging/tenancy. These knobs are service guards, executed after validation.

⸻

B) Job-time parameters (training/materialization; schema-checked)

Folder: analytics/configs/models/<domain>/<job>.yaml
Param schemas: analytics/schemas/params/*.schema.json (enforced by each job’s *_validate.py)
	•	#1 CLV (BG/NBD+GG / Bayes variant)
File(s): customer/clv_score.yaml
Keys: bootstrap_B, returns_factor
Schema: clv_params.schema.json (scoring-relevant fields)
	•	#2 Two-tower retrieval
File(s): search/reco_towers_train.yaml
(Training knobs like architecture, negatives, sampling strategy, export options)
Schema: reco_towers_params.schema.json
	•	#3 Basket re-rank (training)
File(s): cart/basket_rerank_train.yaml
(LTR loss/negatives, feature set, export options)
Schema: ranknet_params.schema.json (or a basket-specific one if you split later)
	•	#4 Promotion Uplift (Campaign)
File(s): campaign/promotion_uplift.yaml
Keys: budget, cap_per_arm, cuped_pre_metric_days, holdout_policy
Schema: uplift_params.schema.json
	•	#5 Personas (HDBSCAN/K-Means)
File(s): customer/personas_hdbscan.yaml
Keys: min_cluster_size, stability_min
Schema: (same file governs; add fields under a small params block if you prefer)
	•	#6 Affinities (time-decayed)
File(s): customer/affinities_daily.yaml
Keys: half_life_days, alpha, weight_purchase
Schema: affinities_params.schema.json
	•	#7 Similarity index build (FAISS)
File(s): product/similarity_index_build.yaml
Keys: index type (IVF/HNSW/PQ), dims, train_k, etc.
Schema: (document in the same job config or extend a small params schema)
	•	#8 PLP/Search LTR (training)
File(s): search/ranknet_train.yaml
Keys: negatives_per_click, loss/feature toggles, export options
Schema: ranknet_params.schema.json
(Serving guards for #8 still live in signals.yaml → search_rank as above.)
	•	#9 Markdown optimizer
File(s): pricing/markdown_optimizer.yaml
Keys: quantile, guard_quantile, min_margin_pct, ladder/constraint toggles
Schema: markdown_params.schema.json
	•	#10 Elasticity (gated)
File(s): pricing/elasticity_fit.yaml
Keys: min_price_points, min_r2
Schema: elasticity_params.schema.json
	•	#11 Upsell propensity (training)
File(s): cart/upsell_train.yaml
Keys: lambda, base_gm_source, export options (ONNX or native)
Schema: upsell_params.schema.json
(Serving guard for #11 is signals.yaml → upsell.min_margin_cents as above.)
	•	#12 Cross-sell (training/materialization)
File(s): pdp/cross_sell_train.yaml, pdp/cross_sell_daily.yaml
(Mining/embedding params; daily materialization cadence)
Schema: cross_sell_params.schema.json
	•	#13 Bundle optimizer
File(s): assortment/bundle_optimizer.yaml
Keys: max_per_hero, min_hero_gm_cents, brand_rules
Schema: bundle_params.schema.json
	•	#14 Churn
File(s): customer/churn_train.yaml, customer/churn_score.yaml
Keys (train): gain_cents, cost_cents ; (score): threshold policy, horizon
Schema: you can reference upsell/GBDT style or add a small churn-specific block
	•	#15 Lifecycle (HSMM/Hawkes)
File(s): customer/lifecycle_fit.yaml, customer/lifecycle_score.yaml
Keys: theta, min_weeks_in_state (and any priors/regularization)
Schema: hsmm_params.schema.json

⸻

Extras that often cause confusion (and how we pinned them)
	•	Rank weights are per-feature, not per query/product.
Table schema: analytics/schemas/models/rank_weights.schema.json
Composite key: (store_id, feature, model_version, as_of_ts) (optionally feature: "intercept").
If you later materialize per-query/product features, that becomes a separate table (keys like (store_id, query_id|date_bucket, product_id, as_of_ts)), and is configured under the job that builds those features (e.g., search_features_daily.yaml).
	•	Service validators vs. guards.
Validators (analytics/signals/internal/validators/*.go) = only required args, enums, paging caps, tenancy.
Guards (signals.yaml) = freshness/stock/eligibility/caps, executed after validation in each service file (internal/services/*.go).

⸻

“Where to look” checklist (so nothing is missed)
	•	All service-time knobs you listed live in analytics/configs/signals.yaml under the five blocks: search_rank, basket, similar, upsell, cross_sell.
	•	All job-time knobs live in the specific job YAML under analytics/configs/models/<domain>/… and are schema-checked by analytics/schemas/params/*.schema.json.
	•	Every model page in the guide (Section 3) repeats which file holds the knobs and which service or job consumes them.






Product (catalog & inventory)

What it is
Canonical product attributes (price, cogs, margin, promo flags, shipping flags, attribute vectors) and stock levels. This is the backbone for ranking, similarity, cross-sell, pricing, and assortment.

Where it shows up in the repo
	•	Sources: mongo:products, mongo:inventory (operational truths).
	•	Configs: analytics/configs/models/product/similarity_index_build.yaml (ANN build), plus product-dependent knobs in configs/models/pricing/*, assortment/*, search/*, pdp/*.
	•	Jobs: analytics/jobs/product/similarity_index_build/ (build FAISS index from product signals).
	•	Schemas: analytics/schemas/models/product_signals.schema.json (derived attributes used by multiple jobs), similarity_artifacts.schema.json (FAISS meta).
	•	Signals use: filters/guards inside similar, search_rank, cross_sell services.

Powers these models
	•	#2 Two-tower (retrieval features), #8 PLP/Search LTR (margin/promo/price),
	•	#7 Similarity/ANN (embedding inputs), #12 Cross-sell (value/stock/substitute flags),
	•	#9 Markdown (stock, cogs, ladder), #10 Elasticity (price history), #13 Bundles (hero GM protection).

Keys & partitions
	•	Primary: (store_id, product_id); time-varying facts keyed with as_of_date/as_of_ts.
	•	Inventory requires near-real-time freshness (≤120 s) for online guards.

Freshness & guards
	•	Guards (service time): in analytics/configs/signals.yaml — search_rank, similar, cross_sell blocks (e.g., low_stock_days, exclude_substitutes, cap_per_category, promo_fresh_sec).
	•	Training/materialization knobs (job time): inside the relevant model YAMLs (similarity, markdown, elasticity).

⸻

Cart (session context)

What it is
The live cart/session state (which items are in cart, quantities, hero items), plus pre-computed baselines/eligibility used to keep upsell and basket re-rank safe.

Where it shows up in the repo
	•	Sources: mongo:carts (cart items), session metrics tables (PG/CH).
	•	Configs: analytics/configs/models/cart/{basket_rerank_train.yaml, upsell_train.yaml, upsell_daily.yaml}; runtime guards in configs/signals.yaml → basket and → upsell.
	•	Jobs: analytics/jobs/cart/basket_rerank_train/, upsell_train/, upsell_daily/.
	•	Schemas: analytics/schemas/models/upsell_scores.schema.json (if you materialize scores), basket feature tables (via CH/PG schemas referenced by configs).

Powers these models
	•	#3 Basket Re-rank (uses cart items + attach signals),
	•	#11 Upsell Propensity (uses eligibility + margin/guardrails).

Keys & partitions
	•	Session cart: (store_id, session_id) or (store_id, cart_id).
	•	For per-item signals: add product_id; include as_of_ts when time-varying.

Freshness & guards
	•	Online SLO: ≤120 ms; inputs must be fresh (≤120 s).
	•	Guards (service): lambda_cvr_guard, min_margin_cents, low_stock_days, cap_per_seller in signals.yaml.

⸻

Order (transactions, returns, price history)

What it is
Historical purchases, returns, margins, weekly price/units; aggregated windows for CLV, churn/lifecycle; price history for elasticity; demand forecasts for markdown.

Where it shows up in the repo
	•	Sources: mongo:orders, pg/ch:orders_agg, pg/ch:returns_agg, pg/ch:price_history, pg/ch:forecast.
	•	Configs: analytics/configs/models/customer/* (CLV/churn/lifecycle), pricing/* (markdown/elasticity).
	•	Jobs: CLV fit/score, churn fit/score, lifecycle fit/score, elasticity fit, markdown optimizer.
	•	Schemas: tiers_clv.schema.json, churn_risk.schema.json, lifecycle_state.schema.json, elasticity.schema.json, markdown_plans.schema.json.

Powers these models
	•	#1 CLV (orders & margin), #14 Churn (recency/frequency GM windows), #15 Lifecycle (weekly sequences),
	•	#10 Elasticity (weekly price/units), #9 Markdown (forecasts & stock).

Keys & partitions
	•	CLV/Churn/Lifecycle outputs: (store_id, customer_id, as_of_date, model_version);
	•	Elasticity: (store_id, product_id, week|as_of_date, model_version);
	•	Markdown: (store_id, product_id, effective_date, model_version).

Freshness & guards
	•	Mostly batch/micro-batch; service does freshness TTL checks when these features gate online results (e.g., cap stale promos).

⸻

Brand / Category / Sub-category (taxonomy)

What it is
Hierarchical taxonomy dimensions attached to products; used for navigation, filtering, and as signals for discovery and personalization.

Where it shows up in the repo
	•	Sources: taxonomy in mongo:products; rules in pg/ch:catalog_rules (e.g., substitute_flag, brand rule violations).
	•	Configs: taxonomy-aware knobs live under configs/models/pdp/cross_sell_*, product/similarity_index_build.yaml, search/*, and service guards in configs/signals.yaml → {similar, cross_sell, search_rank}.
	•	Jobs: personas/affinities use taxonomy to build category_share_vector_90d and brand preferences; similarity/cross-sell may filter by taxonomy; search features may include category/brand priors.
	•	Schemas: personas.schema.json, affinity_edges.schema.json, and product_signals.schema.json capture taxonomy-based features.

Powers these models
	•	#6 Affinities (brand/category preferences), #7 Similarity (taxonomy-aware neighbors), #8 LTR (category/brand features), #12 Cross-sell (exclude substitutes, cap per category), #13 Bundles (brand rules).

Keys & partitions
	•	As dimensions, they join via (store_id, product_id); affinity edges use (store_id, customer_id, brand_id|category_id, as_of_date, model_version).

Freshness & guards
	•	Guards (service-time): exclude_substitutes, cap_per_category (cross-sell), taxonomy filters in similar and search_rank.
	•	If a brand/category/sub-category is missing, the UI suppresses that control; analytics still functions using available dimensions.

⸻

Customer

What it is
Customer master records and behavioral aggregates supporting CLV, personas, affinities, churn, and lifecycle.

Where it shows up in the repo
	•	Sources: pg/ch:customers_agg, pg/ch:sessions_agg, pg/ch:rfm_agg, plus job-specific feature views.
	•	Configs: analytics/configs/models/customer/* (CLV, personas, affinities, churn, lifecycle).
	•	Jobs: clv_*, personas_hdbscan, affinities_daily, churn_*, lifecycle_*, plus support ETL customer_signals/ and visitor_cohorts/.
	•	Schemas: tiers_clv.schema.json, customer_segments.schema.json, affinity_edges.schema.json, churn_risk.schema.json, lifecycle_state.schema.json.

Powers these models
	•	#1 CLV, #5 Personas, #6 Affinities, #14 Churn, #15 Lifecycle; indirectly informs #2/#8 personalization.

Keys & partitions
	•	Outputs consistently keyed (store_id, customer_id, as_of_date, model_version).

Freshness & guards
	•	Mostly batch/micro-batch; online services may read cached attributes (e.g., affinities) for re-ranking context but never retrain online.

⸻

How these domains plug into config and serving
	•	Job-time parameters (feature generation, training, materialization) live in analytics/configs/models/<domain>/<job>.yaml and are schema-checked by analytics/schemas/params/*.schema.json.
	•	Service-time guards (what happens at request time) live in analytics/configs/signals.yaml under five blocks tied to online surfaces:
	•	search_rank (uses product + taxonomy),
	•	basket (uses cart + product + order guardrails),
	•	similar (uses product + taxonomy),
	•	upsell (uses cart + product + order guardrails),
	•	cross_sell (uses product + taxonomy + order/returns).

Primary key rule (all domains)
	•	Always lead with store_id; add tenant_id when the business needs cross-store reporting. Time-varying facts include as_of_date or as_of_ts; model-derived outputs include model_version.

⸻





Here’s the final audit—clean, precise, and focused on consistency and completeness.

## Verdict

**Pass.** Your Block 1 tree and Block 2 guide are consistent with each other and with the canonical “Signals → Models Map v1.” All 15 models (plus the CLV variant) are represented; Model #4 (Promotion Uplift) is correctly added with job, config, schemas, and Cron. The split of **Python (training/materialization)** vs **Go + embedded C++ engines (online inference)** is applied exactly to the six real-time families (#2, #3, #7, #8, #11, #12). Keys, tenancy, config governance, validators vs guards, and readiness semantics are aligned.

## Micro-nits (non-blocking polish)

1. **ASCII connector alignment (cosmetic):**
   Under `analytics/jobs/assortment/`, use `├── assortment/` (not misaligned `│   │    └──`) to keep tree formatting uniform.
2. **Signals engines readme (optional helper):**
   You included `analytics/signals/internal/engines/README.md` in the plan text—make sure the file exists in the tree (even as a placeholder) so future readers see model→engine mapping and thread/env knobs.
3. **Param schemas present for referenced knobs:**
   You’ve listed all critical ones (e.g., `reco_towers_params`, `ranknet_params`, `uplift_params`, `affinities_params`, etc.). If you later decide to persist **similarity FAISS build parameters** separately, you can add a minimal `similarity_params.schema.json`—not required now.
4. **Basket CH store file (optional):**
   You included both `basket_store_ch.go` and `basket_store_pg.go` which is fine. If CH isn’t used for basket features initially, you can keep the CH file stubbed or remove it to avoid confusion.

## No contradictions found

* **No versioned artifact folders** are pre-created under `models/registry/` (complies with your rule).
* **Rank weights** are **per-feature** (not per query/product) and documented as such; per-query/product features, if later materialized, are a separate table.
* **Service validators vs guards** separation is maintained and repeated consistently: validators = request shape/paging/tenancy only; guards = stock/eligibility/freshness/caps after validation.
* **Tenancy & keys**: always `store_id` leading; add `tenant_id` only when the business needs it; include `as_of_*` + `model_version`.
* **Online vs offline vs nearline**: training is offline; six families serve online via embedded C++ engines; nearline jobs refresh features/scores to meet freshness TTL.

## Everything required is present

* **Model #4 Promotion Uplift**: job (`analytics/jobs/campaign/promotion_uplift/`), config (`configs/models/campaign/promotion_uplift.yaml`), output schema (`schemas/models/promotion_assignments.schema.json`), param schema (`schemas/params/uplift_params.schema.json`), Cron (`deploy/k8s/jobs/campaign-promotion-uplift-cronjob.yaml`).
* **Six online GraphQL surfaces** (schemas, resolvers, services, validators): `search_rank`, `basket`, `similar`, `upsell`, `cross_sell` (+ `ops`).
* **Engines embedded** with Go cgo wrappers: `onnxrt` (used by #2, #3, #8, #11), `faiss` (#7, #12), `gbdt` (optional path for #11).
* **Signals config** (`analytics/configs/signals.yaml`) is the sole home for **service-time guards**; **job-time knobs** live only in `analytics/configs/models/<domain>/<job>.yaml` and are schema-checked by `analytics/schemas/params/*.schema.json`.
* **Store DAL** (`signals/internal/store/*`), **factory & interfaces**, **loaders** (artifact fetch + hot-reload), **metrics/logging**, **/readyz** semantics—present and reflected in the guide.

## Ready to proceed

You can move forward with confidence. If you want, I can produce a tiny “installation keys” appendix next (still no code) listing, per job and per engine, the **expected packages** and **exact config keys** to populate—so your team can start writing the per-folder implementation READMEs with zero guesswork.
